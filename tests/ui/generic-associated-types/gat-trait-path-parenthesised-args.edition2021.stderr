error: expected type, found lifetime
  --> $DIR/gat-trait-path-parenthesised-args.rs:8:29
   |
LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}
   |                             ^^ expected type

error: parenthesized generic arguments cannot be used in associated type constraints
  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27
   |
LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}
   |                           ^^^^^
   |
help: use angle brackets instead
   |
LL - fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}
LL + fn foo<'a>(arg: Box<dyn X<Y<'a> = &'a ()>>) {}
   |

error: parenthesized generic arguments cannot be used in associated type constraints
  --> $DIR/gat-trait-path-parenthesised-args.rs:21:27
   |
LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}
   |                           ^--
   |                            |
   |                            help: remove these parentheses

error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied
  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27
   |
LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}
   |                           ^ expected 1 lifetime argument
   |
note: associated type defined here, with 1 lifetime parameter: `'a`
  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8
   |
LL |   type Y<'a>;
   |        ^ --
help: add missing lifetime argument
   |
LL | fn foo<'a>(arg: Box<dyn X<Y('_, 'a) = &'a ()>>) {}
   |                             +++

error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied
  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27
   |
LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}
   |                           ^ expected 1 lifetime argument
   |
note: associated type defined here, with 1 lifetime parameter: `'a`
  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8
   |
LL |   type Y<'a>;
   |        ^ --
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
help: add missing lifetime argument
   |
LL | fn foo<'a>(arg: Box<dyn X<Y('_, 'a) = &'a ()>>) {}
   |                             +++

error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied
  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27
   |
LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}
   |                           ^ expected 1 lifetime argument
   |
note: associated type defined here, with 1 lifetime parameter: `'a`
  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8
   |
LL |   type Y<'a>;
   |        ^ --
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
help: add missing lifetime argument
   |
LL | fn foo<'a>(arg: Box<dyn X<Y('_, 'a) = &'a ()>>) {}
   |                             +++

error[E0038]: the trait `X` is not dyn compatible
  --> $DIR/gat-trait-path-parenthesised-args.rs:8:21
   |
LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}
   |                     ^^^^^^^^^^^^^^^^^^^^^ `X` is not dyn compatible
   |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8
   |
LL | trait X {
   |       - this trait is not dyn compatible...
LL |   type Y<'a>;
   |        ^ ...because it contains the generic associated type `Y`
   = help: consider moving `Y` to another trait

error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied
  --> $DIR/gat-trait-path-parenthesised-args.rs:21:27
   |
LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}
   |                           ^ expected 1 lifetime argument
   |
note: associated type defined here, with 1 lifetime parameter: `'a`
  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8
   |
LL |   type Y<'a>;
   |        ^ --
help: add missing lifetime argument
   |
LL | fn bar<'a>(arg: Box<dyn X<Y('_) = ()>>) {}
   |                             ++

error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied
  --> $DIR/gat-trait-path-parenthesised-args.rs:21:27
   |
LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}
   |                           ^ expected 1 lifetime argument
   |
note: associated type defined here, with 1 lifetime parameter: `'a`
  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8
   |
LL |   type Y<'a>;
   |        ^ --
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
help: add missing lifetime argument
   |
LL | fn bar<'a>(arg: Box<dyn X<Y('_) = ()>>) {}
   |                             ++

error[E0107]: associated type takes 1 lifetime argument but 0 lifetime arguments were supplied
  --> $DIR/gat-trait-path-parenthesised-args.rs:21:27
   |
LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}
   |                           ^ expected 1 lifetime argument
   |
note: associated type defined here, with 1 lifetime parameter: `'a`
  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8
   |
LL |   type Y<'a>;
   |        ^ --
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
help: add missing lifetime argument
   |
LL | fn bar<'a>(arg: Box<dyn X<Y('_) = ()>>) {}
   |                             ++

error[E0038]: the trait `X` is not dyn compatible
  --> $DIR/gat-trait-path-parenthesised-args.rs:21:21
   |
LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}
   |                     ^^^^^^^^^^^^^^^ `X` is not dyn compatible
   |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8
   |
LL | trait X {
   |       - this trait is not dyn compatible...
LL |   type Y<'a>;
   |        ^ ...because it contains the generic associated type `Y`
   = help: consider moving `Y` to another trait

error: aborting due to 11 previous errors

Some errors have detailed explanations: E0038, E0107.
For more information about an error, try `rustc --explain E0038`.
